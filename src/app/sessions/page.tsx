'use client';

import { useState } from 'react';
import { api } from '@/trpc/react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/app/_components/ui/card';
import { Button } from '@/app/_components/ui/button';
import { format } from 'date-fns';
import { Badge } from '@/app/_components/ui/badge';
import { useRouter } from 'next/navigation';
import { Skeleton } from '@/app/_components/ui/skeleton';
import Link from 'next/link';
import { ArrowLeft, ChevronLeft, ChevronRight } from 'lucide-react';

export default function SessionsPage() {
    const [page, setPage] = useState(1);
    const perPage = 10;
    const router = useRouter();

    const { data: sessions, isLoading } = api.shoppingSessions.getSessionsList.useQuery({
        page,
        perPage,
    });

    const handleViewSession = (sessionId: number) => {
        router.push(`/transactions?sessionId=${sessionId}`);
    };

    return (
        <div className="max-w-5xl m-auto">
            <div className="flex items-center mb-6">
                <Link href="/" className="mr-4">
                    <Button variant="outline" size="icon">
                        <ArrowLeft className="h-4 w-4" />
                    </Button>
                </Link>
                <h1 className="text-4xl">Сессии покупок</h1>
            </div>

            {isLoading ? (
                // Скелетон загрузки
                Array.from({ length: 3 }).map((_, index) => (
                    <Card key={`skeleton-${index}`} className="mb-4">
                        <CardHeader>
                            <Skeleton className="h-8 w-1/3" />
                            <Skeleton className="h-4 w-1/4 mt-2" />
                        </CardHeader>
                        <CardContent>
                            <div className="flex gap-2">
                                <Skeleton className="h-6 w-20" />
                                <Skeleton className="h-6 w-20" />
                            </div>
                        </CardContent>
                    </Card>
                ))
            ) : sessions?.length === 0 ? (
                <div className="text-center py-10">
                    <p className="text-lg text-muted-foreground">У вас пока нет сессий покупок</p>
                    <Button className="mt-4" onClick={() => router.push('/transactions')}>
                        Перейти к транзакциям
                    </Button>
                </div>
            ) : (
                <>
                    {sessions?.map((session) => (
                        <Card key={`session-${session.id}`} className="mb-4">
                            <CardHeader>
                                <CardTitle>{session.name || format(new Date(session.createdAt), 'dd.MM.yyyy HH:mm')}</CardTitle>
                                <CardDescription>
                                    Создана: {format(new Date(session.createdAt), 'dd.MM.yyyy HH:mm')}
                                    {session.autoGenerated && ' (автоматически)'}
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                <div className="flex flex-wrap gap-2">
                                    {Object.entries(session.totals).map(([currency, amount]) => (
                                        <Badge key={currency} variant={amount >= 0 ? 'default' : 'destructive'}>
                                            {amount >= 0 ? '+' : ''}{amount} {currency}
                                        </Badge>
                                    ))}
                                    <Badge variant="secondary">{session.transactionCount} транзакций</Badge>
                                </div>
                            </CardContent>
                            <CardFooter>
                                <Button variant="outline" onClick={() => handleViewSession(session.id)}>
                                    Просмотреть транзакции
                                </Button>
                            </CardFooter>
                        </Card>
                    ))}

                    {/* Пагинация */}
                    <div className="flex justify-center gap-2 mt-6">
                        <Button
                            variant="outline"
                            size="icon"
                            onClick={() => setPage((p) => Math.max(1, p - 1))}
                            disabled={page === 1}
                        >
                            <ChevronLeft className="h-4 w-4" />
                        </Button>
                        <Button variant="outline" disabled>
                            {page}
                        </Button>
                        <Button
                            variant="outline"
                            size="icon"
                            onClick={() => setPage((p) => p + 1)}
                            disabled={(sessions?.length ?? 0) < perPage}
                        >
                            <ChevronRight className="h-4 w-4" />
                        </Button>
                    </div>
                </>
            )}
        </div>
    );
}